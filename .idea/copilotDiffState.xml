<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/frontend/src/services/ReciboService.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/frontend/src/services/ReciboService.ts" />
              <option name="originalContent" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { ReciboDto } from '../models/Recibo.dto';&#10;import { Observable } from 'rxjs';&#10;import { UrlService } from '../services/url.service';&#10;&#10;@Injectable({ providedIn: 'root' })&#10;export class ReciboService {&#10;  private endpoint: string = '/recibo';&#10;&#10;  constructor(private http: HttpClient, private urlService: UrlService) {}&#10;&#10;  traerRecibo(id: number): Observable&lt;ReciboDto&gt; {&#10;    return this.http.get&lt;ReciboDto&gt;(&#10;      `${this.urlService.baseUrl}${this.endpoint}/${id}`&#10;    );&#10;  }&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { ReciboDto } from '../models/Recibo.dto';&#10;import { Observable } from 'rxjs';&#10;import { UrlService } from '../services/url.service';&#10;&#10;@Injectable({ providedIn: 'root' })&#10;export class ReciboService {&#10;  private endpoint: string = '/recibo';&#10;&#10;  constructor(private http: HttpClient, private urlService: UrlService) {}&#10;&#10;  traerRecibo(id: number): Observable&lt;ReciboDto&gt; {&#10;    return this.http.get&lt;ReciboDto&gt;(&#10;      `${this.urlService.baseUrl}${this.endpoint}/${id}`&#10;    );&#10;  }&#10;&#10;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/ti/proyectoinia/dtos/PMSDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/ti/proyectoinia/dtos/PMSDto.java" />
              <option name="originalContent" value="package ti.proyectoinia.dtos;&#10;&#10;import lombok.Data;&#10;import lombok.Generated;&#10;import java.util.Date;&#10;&#10;@Data&#10;public class PMSDto {&#10;    private Long id;&#10;&#10;    private float pesoMilSemillas;&#10;&#10;    private float humedadPorcentual;&#10;&#10;    private Date fechaMedicion;&#10;&#10;    private String metodo;&#10;&#10;    private String observaciones;&#10;&#10;    private boolean activo;&#10;&#10;    private boolean repetido;&#10;&#10;    private Long reciboId;&#10;&#10;    @Generated&#10;    public boolean equals(final Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        PMSDto that = (PMSDto) o;&#10;        return java.util.Objects.equals(id, that.id) &amp;&amp;&#10;                Float.compare(pesoMilSemillas, that.pesoMilSemillas) == 0 &amp;&amp;&#10;                Float.compare(humedadPorcentual, that.humedadPorcentual) == 0 &amp;&amp;&#10;                java.util.Objects.equals(fechaMedicion, that.fechaMedicion) &amp;&amp;&#10;                java.util.Objects.equals(metodo, that.metodo) &amp;&amp;&#10;                java.util.Objects.equals(observaciones, that.observaciones) &amp;&amp;&#10;                activo == that.activo;&#10;    }&#10;&#10;    @Generated&#10;    protected boolean canEqual(final Object other) {&#10;        return other instanceof PMSDto;&#10;    }&#10;&#10;    @Generated&#10;    public int hashCode() {&#10;        int result = 1;&#10;        Object $id = this.getId();&#10;        result = result * 59 + ($id == null ? 43 : $id.hashCode());&#10;        result = result * 59 + Float.floatToIntBits(this.getPesoMilSemillas());&#10;        result = result * 59 + Float.floatToIntBits(this.getHumedadPorcentual());&#10;        Object $fechaMedicion = this.getFechaMedicion();&#10;        result = result * 59 + ($fechaMedicion == null ? 43 : $fechaMedicion.hashCode());&#10;        Object $metodo = this.getMetodo();&#10;        result = result * 59 + ($metodo == null ? 43 : $metodo.hashCode());&#10;        Object $observaciones = this.getObservaciones();&#10;        result = result * 59 + ($observaciones == null ? 43 : $observaciones.hashCode());&#10;        result = result * 59 + (this.isActivo() ? 79 : 97);&#10;        return result;&#10;    }&#10;&#10;    @Generated&#10;    public String toString() {&#10;        return &quot;PMSDto(id=&quot; + this.getId() + &quot;, pesoMilSemillas=&quot; + this.getPesoMilSemillas() + &quot;)&quot;;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ti.proyectoinia.dtos;&#13;&#10;&#13;&#10;import lombok.Data;&#13;&#10;import lombok.Generated;&#13;&#10;import java.util.Date;&#13;&#10;&#13;&#10;@Data&#13;&#10;public class PMSDto {&#13;&#10;    private Long id;&#13;&#10;&#13;&#10;    private float pesoMilSemillas;&#13;&#10;&#13;&#10;    private float humedadPorcentual;&#13;&#10;&#13;&#10;    private Date fechaMedicion;&#13;&#10;&#13;&#10;    private String metodo;&#13;&#10;&#13;&#10;    private String observaciones;&#13;&#10;&#13;&#10;    private boolean activo;&#13;&#10;&#13;&#10;    private boolean repetido;&#13;&#10;&#13;&#10;    private Long reciboId;&#13;&#10;&#13;&#10;    @Generated&#13;&#10;    public boolean equals(final Object o) {&#13;&#10;        if (this == o) return true;&#13;&#10;        if (o == null || getClass() != o.getClass()) return false;&#13;&#10;        PMSDto that = (PMSDto) o;&#13;&#10;        return java.util.Objects.equals(id, that.id) &amp;&amp;&#13;&#10;                Float.compare(pesoMilSemillas, that.pesoMilSemillas) == 0 &amp;&amp;&#13;&#10;                Float.compare(humedadPorcentual, that.humedadPorcentual) == 0 &amp;&amp;&#13;&#10;                java.util.Objects.equals(fechaMedicion, that.fechaMedicion) &amp;&amp;&#13;&#10;                java.util.Objects.equals(metodo, that.metodo) &amp;&amp;&#13;&#10;                java.util.Objects.equals(observaciones, that.observaciones) &amp;&amp;&#13;&#10;                activo == that.activo;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Generated&#13;&#10;    protected boolean canEqual(final Object other) {&#13;&#10;        return other instanceof PMSDto;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Generated&#13;&#10;    public int hashCode() {&#13;&#10;        int result = 1;&#13;&#10;        Object $id = this.getId();&#13;&#10;        result = result * 59 + ($id == null ? 43 : $id.hashCode());&#13;&#10;        result = result * 59 + Float.floatToIntBits(this.getPesoMilSemillas());&#13;&#10;        result = result * 59 + Float.floatToIntBits(this.getHumedadPorcentual());&#13;&#10;        Object $fechaMedicion = this.getFechaMedicion();&#13;&#10;        result = result * 59 + ($fechaMedicion == null ? 43 : $fechaMedicion.hashCode());&#13;&#10;        Object $metodo = this.getMetodo();&#13;&#10;        result = result * 59 + ($metodo == null ? 43 : $metodo.hashCode());&#13;&#10;        Object $observaciones = this.getObservaciones();&#13;&#10;        result = result * 59 + ($observaciones == null ? 43 : $observaciones.hashCode());&#13;&#10;        result = result * 59 + (this.isActivo() ? 79 : 97);&#13;&#10;        return result;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Generated&#13;&#10;    public String toString() {&#13;&#10;        return &quot;PMSDto(id=&quot; + this.getId() + &quot;, pesoMilSemillas=&quot; + this.getPesoMilSemillas() + &quot;)&quot;;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/ti/proyectoinia/dtos/PurezaPNotatumDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/ti/proyectoinia/dtos/PurezaPNotatumDto.java" />
              <option name="originalContent" value="package ti.proyectoinia.dtos;&#10;&#10;import lombok.Data;&#10;import lombok.Generated;&#10;&#10;@Data&#10;public class PurezaPNotatumDto {&#10;    &#10;    private Long id;&#10;    &#10;    private float porcentaje;&#10;    &#10;    private float pesoInicial;&#10;    &#10;    private int repeticiones;&#10;    &#10;    private float Pi;&#10;    &#10;    private float At;&#10;    &#10;    private float porcentajeA;&#10;    &#10;    private int totalA;&#10;    &#10;    private float semillasLS;&#10;&#10;    private boolean activo;&#10;&#10;    private boolean repetido;&#10;&#10;    private Long reciboId;&#10;&#10;    @Generated&#10;    public boolean equals(final Object o) {&#10;        if (o == this) return true;&#10;        if (!(o instanceof PurezaPNotatumDto)) return false;&#10;        PurezaPNotatumDto other = (PurezaPNotatumDto) o;&#10;        return id != null &amp;&amp; id.equals(other.id);&#10;    }&#10;&#10;    @Generated&#10;    public int hashCode() {&#10;        return id != null ? id.hashCode() : 0;&#10;    }&#10;&#10;    @Generated&#10;    public String toString() {&#10;        return &quot;PurezaPnotatumDto(id=&quot; + id + &quot;, porcentaje=&quot; + porcentaje + &quot;, pesoInicial=&quot; + pesoInicial + &quot;)&quot;;&#10;    }&#10;}" />
              <option name="updatedContent" value="package ti.proyectoinia.dtos;&#13;&#10;&#13;&#10;import lombok.Data;&#13;&#10;import lombok.Generated;&#13;&#10;&#13;&#10;@Data&#13;&#10;public class PurezaPNotatumDto {&#13;&#10;    &#13;&#10;    private Long id;&#13;&#10;    &#13;&#10;    private float porcentaje;&#13;&#10;    &#13;&#10;    private float pesoInicial;&#13;&#10;    &#13;&#10;    private int repeticiones;&#13;&#10;    &#13;&#10;    private float Pi;&#13;&#10;    &#13;&#10;    private float At;&#13;&#10;    &#13;&#10;    private float porcentajeA;&#13;&#10;    &#13;&#10;    private int totalA;&#13;&#10;    &#13;&#10;    private float semillasLS;&#13;&#10;&#13;&#10;    private boolean activo;&#13;&#10;&#13;&#10;    private boolean repetido;&#13;&#10;&#13;&#10;    private Long reciboId;&#13;&#10;&#13;&#10;    @Generated&#13;&#10;    public boolean equals(final Object o) {&#13;&#10;        if (o == this) return true;&#13;&#10;        if (!(o instanceof PurezaPNotatumDto)) return false;&#13;&#10;        PurezaPNotatumDto other = (PurezaPNotatumDto) o;&#13;&#10;        return id != null &amp;&amp; id.equals(other.id);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Generated&#13;&#10;    public int hashCode() {&#13;&#10;        return id != null ? id.hashCode() : 0;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Generated&#13;&#10;    public String toString() {&#13;&#10;        return &quot;PurezaPnotatumDto(id=&quot; + id + &quot;, porcentaje=&quot; + porcentaje + &quot;, pesoInicial=&quot; + pesoInicial + &quot;)&quot;;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/ti/proyectoinia/dtos/SemillaDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/ti/proyectoinia/dtos/SemillaDto.java" />
              <option name="originalContent" value="package ti.proyectoinia.dtos;&#10;&#10;import lombok.Data;&#10;import lombok.Generated;&#10;import lombok.Getter;&#10;&#10;@Data&#10;public class SemillaDto {&#10;    &#10;    private Long id;&#10;    &#10;    private int nroSemillasPura;&#10;    &#10;    private boolean activo;&#10;&#10;    @Generated&#10;    public boolean equals(final Object o) {&#10;        if (o == this) return true;&#10;        if (!(o instanceof SemillaDto)) return false;&#10;        SemillaDto other = (SemillaDto) o;&#10;        return id != null &amp;&amp; id.equals(other.id);&#10;    }&#10;&#10;    @Generated&#10;    public int hashCode() {&#10;        return id != null ? id.hashCode() : 0;&#10;    }&#10;&#10;    @Generated&#10;    public String toString() {&#10;        return &quot;SemillaDto(id=&quot; + id + &quot;, nroSemillasPura=&quot; + nroSemillasPura + &quot;)&quot;;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ti.proyectoinia.dtos;&#13;&#10;&#13;&#10;import lombok.Data;&#13;&#10;import lombok.Generated;&#13;&#10;import lombok.Getter;&#13;&#10;&#13;&#10;@Data&#13;&#10;public class SemillaDto {&#13;&#10;    &#13;&#10;    private Long id;&#13;&#10;    &#13;&#10;    private int nroSemillasPura;&#13;&#10;    &#13;&#10;    private boolean activo;&#13;&#10;&#13;&#10;    @Generated&#13;&#10;    public boolean equals(final Object o) {&#13;&#10;        if (o == this) return true;&#13;&#10;        if (!(o instanceof SemillaDto)) return false;&#13;&#10;        SemillaDto other = (SemillaDto) o;&#13;&#10;        return id != null &amp;&amp; id.equals(other.id);&#13;&#10;    }&#13;&#10;&#13;&#10;    @Generated&#13;&#10;    public int hashCode() {&#13;&#10;        return id != null ? id.hashCode() : 0;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Generated&#13;&#10;    public String toString() {&#13;&#10;        return &quot;SemillaDto(id=&quot; + id + &quot;, nroSemillasPura=&quot; + nroSemillasPura + &quot;, activo=&quot; + activo + &quot;)&quot;;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/ti/proyectoinia/services/MapsDtoEntityService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/ti/proyectoinia/services/MapsDtoEntityService.java" />
              <option name="originalContent" value="package ti.proyectoinia.services;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;import ti.proyectoinia.business.entities.*;&#10;import ti.proyectoinia.dtos.*;&#10;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class MapsDtoEntityService {&#10;&#10;    @Autowired&#10;    private PasswordEncoder passwordEncoder;&#10;&#10;    public HongoDto mapToDtoHongo(Hongo hongo) {&#10;        if (hongo == null) {&#10;            return null;&#10;        }&#10;&#10;        HongoDto hongoDto = new HongoDto();&#10;        hongoDto.setId(hongo.getId());&#10;        hongoDto.setNombre(hongo.getNombre());&#10;        hongoDto.setDescripcion(hongo.getDescripcion());&#10;        hongoDto.setActivo(hongo.isActivo());&#10;&#10;        return hongoDto;&#10;    }&#10;&#10;    public Hongo mapToEntityHongo(HongoDto hongoDto) {&#10;        if (hongoDto == null) {&#10;            return null;&#10;        }&#10;&#10;        Hongo hongo = new Hongo();&#10;        hongo.setId(hongoDto.getId());&#10;        hongo.setNombre(hongoDto.getNombre());&#10;        hongo.setDescripcion(hongo.getDescripcion());&#10;        hongo.setActivo(hongoDto.isActivo());&#10;&#10;        return hongo;&#10;    }&#10;&#10;    public GerminacionDto mapToDtoGerminacion(Germinacion germinacion) {&#10;        if (germinacion == null) {&#10;            return null;&#10;        }&#10;&#10;        GerminacionDto germinacionDto = new GerminacionDto();&#10;        germinacionDto.setId(germinacion.getId());&#10;        germinacionDto.setFechaInicio(germinacion.getFechaInicio());&#10;        germinacionDto.setFechaConteo1(germinacion.getFechaConteo1());&#10;        germinacionDto.setFechaConteo2(germinacion.getFechaConteo2());&#10;        germinacionDto.setFechaConteo3(germinacion.getFechaConteo3());&#10;        germinacionDto.setFechaConteo4(germinacion.getFechaConteo4());&#10;        germinacionDto.setFechaConteo5(germinacion.getFechaConteo5());&#10;        germinacionDto.setTotalDias(germinacion.getTotalDias());&#10;        germinacionDto.setRepeticionNormal1(germinacion.getRepeticionNormal1());&#10;        germinacionDto.setRepeticionNormal2(germinacion.getRepeticionNormal2());&#10;        germinacionDto.setRepeticionNormal3(germinacion.getRepeticionNormal3());&#10;        germinacionDto.setRepeticionNormal4(germinacion.getRepeticionNormal4());&#10;        germinacionDto.setRepeticionNormal5(germinacion.getRepeticionNormal5());&#10;        germinacionDto.setRepeticionDura(germinacion.getRepeticionDura());&#10;        germinacionDto.setRepeticionFresca(germinacion.getRepeticionFresca());&#10;        germinacionDto.setRepeticionAnormal(germinacion.getRepeticionAnormal());&#10;        germinacionDto.setRepeticionMuerta(germinacion.getRepeticionMuerta());&#10;        germinacionDto.setTotalRepeticion(germinacion.getTotalRepeticion());&#10;        germinacionDto.setPromedioRepeticiones(germinacion.getPromedioRepeticiones());&#10;        germinacionDto.setTratamiento(germinacion.getTratamiento());&#10;        germinacionDto.setNroSemillaPorRepeticion(germinacion.getNroSemillaPorRepeticion());&#10;        germinacionDto.setMetodo(germinacion.getMetodo());&#10;        germinacionDto.setTemperatura(germinacion.getTemperatura());&#10;        germinacionDto.setPreFrio(germinacion.getPreFrio());&#10;        germinacionDto.setPreTratamiento(germinacion.getPreTratamiento());&#10;        germinacionDto.setNroDias(germinacion.getNroDias());&#10;        germinacionDto.setFechaFinal(germinacion.getFechaFinal());&#10;        germinacionDto.setPRedondeo(germinacion.getPRedondeo());&#10;        germinacionDto.setPNormal(germinacion.getPNormal());&#10;        germinacionDto.setPAnormal(germinacion.getPAnormal());&#10;        germinacionDto.setPMuertas(germinacion.getPMuertas());&#10;        germinacionDto.setSemillasDuras(germinacion.getSemillasDuras());&#10;        germinacionDto.setGerminacion(germinacion.getGerminacion());&#10;        germinacionDto.setComentarios(germinacion.getComentarios());&#10;        germinacionDto.setRepetido(germinacion.isRepetido());&#10;&#10;&#10;        if (germinacion.getRecibo() != null) {&#10;            germinacionDto.setReciboId(germinacion.getRecibo().getId());&#10;        } else {&#10;            germinacionDto.setReciboId(null);&#10;        }&#10;        germinacionDto.setActivo(germinacion.isActivo());&#10;&#10;        return germinacionDto;&#10;    }&#10;&#10;    public Germinacion mapToEntityGerminacion(GerminacionDto germinacionDto) {&#10;        if (germinacionDto == null) {&#10;            return null;&#10;        }&#10;&#10;        Germinacion germinacion = new Germinacion();&#10;        germinacion.setId(germinacionDto.getId());&#10;        germinacion.setFechaInicio(germinacionDto.getFechaInicio());&#10;        germinacion.setFechaConteo1(germinacionDto.getFechaConteo1());&#10;        germinacion.setFechaConteo2(germinacionDto.getFechaConteo2());&#10;        germinacion.setFechaConteo3(germinacionDto.getFechaConteo3());&#10;        germinacion.setFechaConteo4(germinacionDto.getFechaConteo4());&#10;        germinacion.setFechaConteo5(germinacionDto.getFechaConteo5());&#10;        germinacion.setTotalDias(germinacionDto.getTotalDias());&#10;        germinacion.setRepeticionNormal1(germinacionDto.getRepeticionNormal1());&#10;        germinacion.setRepeticionNormal2(germinacionDto.getRepeticionNormal2());&#10;        germinacion.setRepeticionNormal3(germinacionDto.getRepeticionNormal3());&#10;        germinacion.setRepeticionNormal4(germinacionDto.getRepeticionNormal4());&#10;        germinacion.setRepeticionNormal5(germinacionDto.getRepeticionNormal5());&#10;        germinacion.setRepeticionDura(germinacionDto.getRepeticionDura());&#10;        germinacion.setRepeticionFresca(germinacionDto.getRepeticionFresca());&#10;        germinacion.setRepeticionAnormal(germinacionDto.getRepeticionAnormal());&#10;        germinacion.setRepeticionMuerta(germinacionDto.getRepeticionMuerta());&#10;        germinacion.setTotalRepeticion(germinacionDto.getTotalRepeticion());&#10;        germinacion.setPromedioRepeticiones(germinacionDto.getPromedioRepeticiones());&#10;        germinacion.setTratamiento(germinacionDto.getTratamiento());&#10;        germinacion.setNroSemillaPorRepeticion(germinacionDto.getNroSemillaPorRepeticion());&#10;        germinacion.setMetodo(germinacionDto.getMetodo());&#10;        germinacion.setTemperatura(germinacionDto.getTemperatura());&#10;        germinacion.setPreFrio(germinacionDto.getPreFrio());&#10;        germinacion.setPreTratamiento(germinacionDto.getPreTratamiento());&#10;        germinacion.setNroDias(germinacionDto.getNroDias());&#10;        germinacion.setFechaFinal(germinacionDto.getFechaFinal());&#10;        germinacion.setPRedondeo(germinacionDto.getPRedondeo());&#10;        germinacion.setPNormal(germinacionDto.getPNormal());&#10;        germinacion.setPAnormal(germinacionDto.getPAnormal());&#10;        germinacion.setPMuertas(germinacionDto.getPMuertas());&#10;        germinacion.setSemillasDuras(germinacionDto.getSemillasDuras());&#10;        germinacion.setGerminacion(germinacionDto.getGerminacion());&#10;        germinacion.setComentarios(germinacionDto.getComentarios());&#10;        germinacion.setRepetido(germinacionDto.isRepetido());&#10;        germinacion.setActivo(germinacionDto.isActivo());&#10;&#10;&#10;        if (germinacionDto.getReciboId() != null) {&#10;            Recibo recibo = new Recibo();&#10;            recibo.setId(germinacionDto.getReciboId());&#10;            germinacion.setRecibo(recibo);&#10;        } else {&#10;            germinacion.setRecibo(null);&#10;        }&#10;&#10;&#10;        return germinacion;&#10;    }&#10;&#10;    public ti.proyectoinia.dtos.ReciboDto mapToDtoRecibo(ti.proyectoinia.business.entities.Recibo recibo) {&#10;        if (recibo == null) {&#10;            return null;&#10;        }&#10;&#10;        ti.proyectoinia.dtos.ReciboDto reciboDto = new ti.proyectoinia.dtos.ReciboDto();&#10;        reciboDto.setId(recibo.getId());&#10;        reciboDto.setNroAnalisis(recibo.getNroAnalisis());&#10;        reciboDto.setEspecie(recibo.getEspecie());&#10;        reciboDto.setFicha(recibo.getFicha());&#10;        reciboDto.setFechaRecibo(recibo.getFechaRecibo());&#10;        reciboDto.setRemitente(recibo.getRemitente());&#10;        reciboDto.setOrigen(recibo.getOrigen());&#10;        reciboDto.setCultivar(recibo.getCultivar());&#10;        reciboDto.setDeposito(recibo.getDeposito());&#10;        reciboDto.setEstado(recibo.getEstado());&#10;        reciboDto.setLote(recibo.getLote());&#10;        reciboDto.setKgLimpios(recibo.getKgLimpios());&#10;        reciboDto.setAnalisisSolicitados(recibo.getAnalisisSolicitados());&#10;        reciboDto.setArticulo(recibo.getArticulo());&#10;        reciboDto.setActivo(recibo.isActivo());&#10;&#10;        return reciboDto;&#10;    }&#10;&#10;    public ti.proyectoinia.business.entities.Recibo mapToEntityRecibo(ti.proyectoinia.dtos.ReciboDto reciboDto) {&#10;        if (reciboDto == null) {&#10;            return null;&#10;        }&#10;&#10;        ti.proyectoinia.business.entities.Recibo recibo = new ti.proyectoinia.business.entities.Recibo();&#10;        if (reciboDto.getId() != null) {&#10;            recibo.setId(reciboDto.getId());&#10;        }&#10;&#10;        recibo.setNroAnalisis(reciboDto.getNroAnalisis());&#10;        recibo.setEspecie(reciboDto.getEspecie());&#10;        recibo.setFicha(reciboDto.getFicha());&#10;        recibo.setFechaRecibo(reciboDto.getFechaRecibo());&#10;        recibo.setRemitente(reciboDto.getRemitente());&#10;        recibo.setOrigen(reciboDto.getOrigen());&#10;        recibo.setCultivar(reciboDto.getCultivar());&#10;        recibo.setDeposito(reciboDto.getDeposito());&#10;        recibo.setEstado(reciboDto.getEstado());&#10;        recibo.setLote(reciboDto.getLote());&#10;        recibo.setKgLimpios(reciboDto.getKgLimpios());&#10;        recibo.setAnalisisSolicitados(reciboDto.getAnalisisSolicitados());&#10;        recibo.setArticulo(reciboDto.getArticulo());&#10;        recibo.setActivo(reciboDto.isActivo());&#10;&#10;        return recibo;&#10;    }&#10;&#10;    public MalezaDto mapToDtoMaleza(Maleza maleza) {&#10;        if (maleza == null) {&#10;            return null;&#10;        }&#10;&#10;        MalezaDto malezaDto = new MalezaDto();&#10;        malezaDto.setId(maleza.getId());&#10;        malezaDto.setNombre(maleza.getNombre());&#10;        malezaDto.setDescripcion(malezaDto.getDescripcion());&#10;        malezaDto.setActivo(maleza.isActivo());&#10;        return malezaDto;&#10;&#10;    }&#10;&#10;    public Maleza mapToEntityMaleza(MalezaDto malezaDto) {&#10;        if (malezaDto == null) {&#10;            return null;&#10;        }&#10;&#10;        Maleza maleza = new Maleza();&#10;        maleza.setId(malezaDto.getId());&#10;        maleza.setNombre(malezaDto.getNombre());&#10;        maleza.setDescripcion(malezaDto.getDescripcion());&#10;        maleza.setActivo(malezaDto.isActivo());&#10;&#10;        return maleza;&#10;    }&#10;&#10;    public SanitarioDto mapToDtoSanitario(Sanitario sanitario) {&#10;        if (sanitario == null) {&#10;            return null;&#10;        }&#10;&#10;        SanitarioDto sanitarioDto = new SanitarioDto();&#10;        sanitarioDto.setId(sanitario.getId());&#10;        sanitarioDto.setFechaSiembra(sanitario.getFechaSiembra());&#10;        sanitarioDto.setFecha(sanitario.getFecha());&#10;        sanitarioDto.setMetodo(sanitario.getMetodo());&#10;        sanitarioDto.setTemperatura(sanitario.getTemperatura());&#10;        sanitarioDto.setHorasLuzOscuridad(sanitario.getHorasLuzOscuridad());&#10;        sanitarioDto.setNroDias(sanitario.getNroDias());&#10;        sanitarioDto.setEstadoProductoDosis(sanitario.getEstadoProductoDosis());&#10;        sanitarioDto.setObservaciones(sanitario.getObservaciones());&#10;        sanitarioDto.setNroSemillasRepeticion(sanitario.getNroSemillasRepeticion());&#10;        sanitarioDto.setActivo(sanitario.isActivo());&#10;        sanitarioDto.setRepetido(sanitario.isRepetido());&#10;&#10;        if (sanitario.getRecibo() != null) {&#10;            sanitarioDto.setReciboId(sanitario.getRecibo().getId());&#10;        } else {&#10;            sanitarioDto.setReciboId(null);&#10;        }&#10;&#10;        if (sanitario.getSanitarioHongos() != null) {&#10;            sanitarioDto.setSanitarioHongoids(&#10;                sanitario.getSanitarioHongos().stream()&#10;                    .map(SanitarioHongo::getId)&#10;                    .collect(Collectors.toList())&#10;            );&#10;        } else {&#10;            sanitarioDto.setSanitarioHongoids(null);&#10;        }&#10;&#10;        return sanitarioDto;&#10;    }&#10;&#10;    public Sanitario mapToEntitySanitario(SanitarioDto sanitarioDto) {&#10;        if (sanitarioDto == null) {&#10;            return null;&#10;        }&#10;&#10;        Sanitario sanitario = new Sanitario();&#10;        sanitario.setId(sanitarioDto.getId());&#10;        sanitario.setFechaSiembra(sanitarioDto.getFechaSiembra());&#10;        sanitario.setFecha(sanitarioDto.getFecha());&#10;        sanitario.setMetodo(sanitarioDto.getMetodo());&#10;        sanitario.setTemperatura(sanitarioDto.getTemperatura());&#10;        sanitario.setHorasLuzOscuridad(sanitarioDto.getHorasLuzOscuridad());&#10;        sanitario.setNroDias(sanitarioDto.getNroDias());&#10;        sanitario.setEstadoProductoDosis(sanitarioDto.getEstadoProductoDosis());&#10;        sanitario.setObservaciones(sanitarioDto.getObservaciones());&#10;        sanitario.setNroSemillasRepeticion(sanitarioDto.getNroSemillasRepeticion());&#10;        sanitario.setActivo(sanitarioDto.isActivo());&#10;        sanitario.setRepetido(sanitarioDto.isRepetido());&#10;&#10;        if (sanitarioDto.getReciboId() != null) {&#10;            Recibo recibo = new Recibo();&#10;            recibo.setId(sanitarioDto.getReciboId());&#10;            sanitario.setRecibo(recibo);&#10;        } else {&#10;            sanitario.setRecibo(null);&#10;        }&#10;&#10;        // Traducción de IDs a entidades SanitarioHongo&#10;        if (sanitarioDto.getSanitarioHongoids() != null) {&#10;            List&lt;SanitarioHongo&gt; sanitarioHongos = sanitarioDto.getSanitarioHongoids().stream()&#10;                .map(id -&gt; {&#10;                    SanitarioHongo sh = new SanitarioHongo();&#10;                    sh.setId(id);&#10;                    sh.setSanitario(sanitario);&#10;                    return sh;&#10;                })&#10;                .collect(Collectors.toList());&#10;            sanitario.setSanitarioHongos(sanitarioHongos);&#10;        } else {&#10;            sanitario.setSanitarioHongos(null);&#10;        }&#10;&#10;        return sanitario;&#10;    }&#10;&#10;    public PMSDto mapToDtoPMS(PMS pms) {&#10;        if (pms == null) {&#10;            return null;&#10;        }&#10;&#10;        PMSDto pmsDto = new PMSDto();&#10;        pmsDto.setId(pms.getId());&#10;        pmsDto.setPesoMilSemillas(pms.getPesoMilSemillas());&#10;        pmsDto.setHumedadPorcentual(pms.getHumedadPorcentual());&#10;        pmsDto.setFechaMedicion(pms.getFechaMedicion());&#10;        pmsDto.setMetodo(pms.getMetodo());&#10;        pmsDto.setObservaciones(pms.getObservaciones());&#10;        pmsDto.setActivo(pms.isActivo());&#10;        pmsDto.setRepetido(pms.isRepetido());&#10;&#10;        if (pms.getRecibo() != null) {&#10;            pmsDto.setReciboId(pms.getRecibo().getId());&#10;        } else {&#10;            pmsDto.setReciboId(null);&#10;        }&#10;        return pmsDto;&#10;    }&#10;&#10;    public PMS mapToEntityPMS(PMSDto pmsDto) {&#10;        if (pmsDto == null) {&#10;            return null;&#10;        }&#10;        PMS pms = new PMS();&#10;        pms.setId(pmsDto.getId());&#10;        pms.setPesoMilSemillas(pmsDto.getPesoMilSemillas());&#10;        pms.setHumedadPorcentual(pmsDto.getHumedadPorcentual());&#10;        pms.setFechaMedicion(pmsDto.getFechaMedicion());&#10;        pms.setMetodo(pmsDto.getMetodo());&#10;        pms.setObservaciones(pmsDto.getObservaciones());&#10;        pms.setActivo(pmsDto.isActivo());&#10;        pms.setRepetido(pmsDto.isRepetido());&#10;        if (pmsDto.getReciboId() != null) {&#10;            Recibo recibo = new Recibo();&#10;            recibo.setId(pmsDto.getReciboId());&#10;            pms.setRecibo(recibo);&#10;        } else {&#10;            pms.setRecibo(null);&#10;        }&#10;        return pms;&#10;    }&#10;&#10;    public PurezaDto mapToDtoPureza(Pureza pureza) {&#10;        if (pureza == null) {&#10;            return null;&#10;        }&#10;&#10;        PurezaDto dto = new PurezaDto();&#10;        dto.setId(pureza.getId());&#10;        dto.setFecha(pureza.getFecha());&#10;        dto.setPesoInicial(pureza.getPesoInicial());&#10;        dto.setSemillaPura(pureza.getSemillaPura());&#10;        dto.setMaterialInerte(pureza.getMaterialInerte());&#10;        dto.setOtrosCultivos(pureza.getOtrosCultivos());&#10;        dto.setMalezas(pureza.getMalezas());&#10;        dto.setMalezasToleradas(pureza.getMalezasToleradas());&#10;        dto.setPesoTotal(pureza.getPesoTotal());&#10;        dto.setOtrosCultivo(pureza.getOtrosCultivo());&#10;        dto.setFechaEstandar(pureza.getFechaEstandar());&#10;        dto.setEstandar(pureza.getEstandar());&#10;        dto.setActivo(pureza.isActivo());&#10;        dto.setRepetido(pureza.isRepetido());&#10;&#10;        if (pureza.getRecibo() != null) {&#10;            dto.setReciboId(pureza.getRecibo().getId());&#10;        } else {&#10;            dto.setReciboId(null);&#10;        }&#10;        return dto;&#10;    }&#10;&#10;    public Pureza mapToEntityPureza(PurezaDto dto) {&#10;        if (dto == null) {&#10;            return null;&#10;        }&#10;&#10;        Pureza pureza = new Pureza();&#10;&#10;        if (dto.getId() != null) {&#10;            pureza.setId(dto.getId());&#10;        }&#10;&#10;        pureza.setFecha(dto.getFecha());&#10;        pureza.setPesoInicial(dto.getPesoInicial());&#10;        pureza.setSemillaPura(dto.getSemillaPura());&#10;        pureza.setMaterialInerte(dto.getMaterialInerte());&#10;        pureza.setOtrosCultivos(dto.getOtrosCultivos());&#10;        pureza.setMalezas(dto.getMalezas());&#10;        pureza.setMalezasToleradas(dto.getMalezasToleradas());&#10;        pureza.setPesoTotal(dto.getPesoTotal());&#10;        pureza.setOtrosCultivo(dto.getOtrosCultivo());&#10;        pureza.setFechaEstandar(dto.getFechaEstandar());&#10;        pureza.setEstandar(dto.isEstandar());&#10;        pureza.setActivo(dto.isActivo());&#10;        pureza.setRepetido(dto.isRepetido());&#10;&#10;        if (dto.getReciboId() != null) {&#10;            Recibo recibo = new Recibo();&#10;            recibo.setId(dto.getReciboId());&#10;            pureza.setRecibo(recibo);&#10;        } else {&#10;            pureza.setRecibo(null);&#10;        }&#10;&#10;        return pureza;&#10;    }&#10;&#10;    public LoteDto mapToDtoLote(Lote lote) {&#10;        if (lote == null) {&#10;            return null;&#10;        }&#10;&#10;        LoteDto loteDto = new LoteDto();&#10;        loteDto.setId(lote.getId());&#10;        loteDto.setNombre(lote.getNombre());&#10;        loteDto.setActivo(lote.isActivo());&#10;        loteDto.setDescripcion(lote.getDescripcion());&#10;        loteDto.setFechaCreacion(lote.getFechaCreacion());&#10;        loteDto.setFechaFinalizacion(lote.getFechaFinalizacion());&#10;&#10;        if (lote.getUsuarios() != null) {&#10;            loteDto.setUsuariosId(lote.getUsuarios().stream().map(Usuario::getId).collect(Collectors.toList()));&#10;        } else {&#10;            loteDto.setUsuariosId(null);&#10;        }&#10;&#10;        return loteDto;&#10;    }&#10;&#10;    public Lote mapToEntityLote(LoteDto loteDto) {&#10;        if (loteDto == null) {&#10;            return null;&#10;        }&#10;&#10;        Lote lote = new Lote();&#10;        lote.setId(loteDto.getId());&#10;        lote.setNombre(loteDto.getNombre());&#10;        lote.setActivo(loteDto.isActivo());&#10;        lote.setDescripcion(loteDto.getDescripcion());&#10;        lote.setFechaCreacion(loteDto.getFechaCreacion());&#10;        lote.setFechaFinalizacion(loteDto.getFechaFinalizacion());&#10;&#10;        if (loteDto.getUsuariosId() != null) {&#10;            lote.setUsuarios(loteDto.getUsuariosId().stream().map(id -&gt; {&#10;                Usuario usuario = new Usuario();&#10;                usuario.setId(id);&#10;                return usuario;&#10;            }).collect(Collectors.toList()));&#10;        } else {&#10;            lote.setUsuarios(null);&#10;        }&#10;&#10;        return lote;&#10;    }&#10;&#10;    public UsuarioDto mapToDtoUsuario(Usuario usuario) {&#10;        if (usuario == null) {&#10;            return null;&#10;        }&#10;&#10;        UsuarioDto usuarioDto = new UsuarioDto();&#10;        usuarioDto.setId(usuario.getId());&#10;        usuarioDto.setEmail(usuario.getEmail());&#10;        usuarioDto.setNombre(usuario.getNombre());&#10;        usuarioDto.setPassword(usuario.getPassword());&#10;        usuarioDto.setRol(usuario.getRol());&#10;        usuarioDto.setActivo(usuario.isActivo());&#10;&#10;        if (usuario.getLotes() != null) {&#10;            usuarioDto.setLotesId(usuario.getLotes().stream().map(Lote::getId).collect(Collectors.toList()));&#10;        } else {&#10;            usuarioDto.setLotesId(null);&#10;        }&#10;&#10;        return usuarioDto;&#10;    }&#10;&#10;    public Usuario mapToEntityUsuario(UsuarioDto usuarioDto) {&#10;        if (usuarioDto == null) {&#10;            return null;&#10;        }&#10;&#10;        Usuario usuario = new Usuario();&#10;        usuario.setId(usuarioDto.getId());&#10;        usuario.setEmail(usuarioDto.getEmail());&#10;        usuario.setNombre(usuarioDto.getNombre());&#10;        &#10;        // Encriptar la contraseña si no está vacía&#10;        if (usuarioDto.getPassword() != null &amp;&amp; !usuarioDto.getPassword().trim().isEmpty()) {&#10;            usuario.setPassword(passwordEncoder.encode(usuarioDto.getPassword()));&#10;        } else {&#10;            usuario.setPassword(usuarioDto.getPassword());&#10;        }&#10;        &#10;        usuario.setRol(usuarioDto.getRol());&#10;        usuario.setActivo(usuarioDto.isActivo());&#10;&#10;        if (usuarioDto.getLotesId() != null) {&#10;            usuario.setLotes(usuarioDto.getLotesId().stream().map(id -&gt; {&#10;                Lote lote = new Lote();&#10;                lote.setId(id);&#10;                return lote;&#10;            }).collect(Collectors.toList()));&#10;        } else {&#10;            usuario.setLotes(null);&#10;        }&#10;&#10;        return usuario;&#10;    }&#10;&#10;&#10;    private UsuarioDto mapToDtoUsuarioBasic(Usuario usuario) {&#10;        if (usuario == null) return null;&#10;&#10;        UsuarioDto dto = new UsuarioDto();&#10;        dto.setId(usuario.getId());&#10;        dto.setNombre(usuario.getNombre());&#10;        dto.setEmail(usuario.getEmail());&#10;&#10;        return dto;&#10;    }&#10;&#10;    private Usuario mapToEntityUsuarioBasic(UsuarioDto usuarioDto) {&#10;        if (usuarioDto == null) return null;&#10;&#10;        Usuario usuario = new Usuario();&#10;        usuario.setId(usuarioDto.getId());&#10;        usuario.setNombre(usuarioDto.getNombre());&#10;        usuario.setEmail(usuarioDto.getEmail());&#10;&#10;        return usuario;&#10;    }&#10;&#10;    private LoteDto mapToDtoLoteBasic(Lote lote) {&#10;        if (lote == null) return null;&#10;&#10;        LoteDto dto = new LoteDto();&#10;        dto.setId(lote.getId());&#10;        dto.setNombre(lote.getNombre());&#10;&#10;        return dto;&#10;    }&#10;    private Lote mapToEntityLoteBasic(LoteDto loteDto) {&#10;        if (loteDto == null) return null;&#10;&#10;        Lote lote = new Lote();&#10;        lote.setId(loteDto.getId());&#10;        lote.setNombre(loteDto.getNombre());&#10;&#10;        return lote;&#10;    }&#10;&#10;    public DOSNDto mapToDtoDOSN(DOSN dosn) {&#10;        if (dosn == null) {&#10;            return null;&#10;        }&#10;&#10;        DOSNDto dto = new DOSNDto();&#10;        dto.setId(dosn.getId());&#10;        dto.setFecha(dosn.getFecha());&#10;        dto.setGramosAnalizados(dosn.getGramosAnalizados());&#10;        dto.setTiposDeanalisis(dosn.getTiposDeanalisis());&#10;        dto.setCompletoReducido(dosn.getCompletoReducido());&#10;        dto.setMalezasToleranciaCero(dosn.getMalezasToleranciaCero());&#10;        dto.setOtrosCultivos(dosn.getOtrosCultivos());&#10;        dto.setDeterminacionBrassica(dosn.getDeterminacionBrassica());&#10;        dto.setDeterminacionCuscuta(dosn.getDeterminacionCuscuta());&#10;        dto.setEstandar(dosn.getEstandar());&#10;        dto.setFechaAnalisis(dosn.getFechaAnalisis());&#10;        dto.setActivo(dosn.isActivo());&#10;        dto.setRepetido(dosn.isRepetido());&#10;&#10;        if (dosn.getCultivos() != null) {&#10;            dto.setCultivos(dosn.getCultivos().stream().map(this::mapToDtoCultivo).collect(Collectors.toList()));&#10;        } else {&#10;            dto.setCultivos(null);&#10;        }&#10;        return dto;&#10;    }&#10;&#10;    public DOSN mapToEntityDOSN(DOSNDto dto) {&#10;        if (dto == null) {&#10;            return null;&#10;        }&#10;        DOSN dosn = new DOSN();&#10;        dosn.setId(dto.getId());&#10;        dosn.setFecha(dto.getFecha());&#10;        dosn.setGramosAnalizados(dto.getGramosAnalizados());&#10;        dosn.setTiposDeanalisis(dto.getTiposDeanalisis());&#10;        dosn.setCompletoReducido(dto.isCompletoReducido());&#10;        dosn.setMalezasToleranciaCero(dto.getMalezasToleranciaCero());&#10;        dosn.setOtrosCultivos(dto.getOtrosCultivos());&#10;        dosn.setDeterminacionBrassica(dto.getDeterminacionBrassica());&#10;        dosn.setDeterminacionCuscuta(dto.getDeterminacionCuscuta());&#10;        dosn.setEstandar(dto.isEstandar());&#10;        dosn.setActivo(dto.isActivo());&#10;        dosn.setFechaAnalisis(dto.getFechaAnalisis());&#10;        dosn.setRepetido(dto.isRepetido());&#10;&#10;        if (dto.getCultivos() != null) {&#10;            dosn.setCultivos(dto.getCultivos().stream().map(this::mapToEntityCultivo).collect(Collectors.toList()));&#10;        } else {&#10;            dosn.setCultivos(null);&#10;        }&#10;        return dosn;&#10;    }&#10;&#10;    private CultivoDto mapToDtoCultivo(Cultivo cultivo) {&#10;        if (cultivo == null) return null;&#10;&#10;        CultivoDto dto = new CultivoDto();&#10;        dto.setId(cultivo.getId());&#10;        dto.setNombre(cultivo.getNombre());&#10;        dto.setDescripcion(cultivo.getDescripcion());&#10;        dto.setActivo(cultivo.isActivo());&#10;&#10;        return dto;&#10;    }&#10;    private Cultivo mapToEntityCultivo(CultivoDto dto) {&#10;        if (dto == null) return null;&#10;&#10;        Cultivo cultivo = new Cultivo();&#10;        cultivo.setId(dto.getId());&#10;        cultivo.setNombre(dto.getNombre());&#10;        cultivo.setDescripcion(dto.getDescripcion());&#10;        cultivo.setActivo(dto.isActivo());&#10;&#10;        return cultivo;&#10;    }&#10;&#10;    public PurezaPNotatumDto mapToDtoPurezaPNotatum(PurezaPNotatum pureza) {&#10;        if (pureza == null) {&#10;            return null;&#10;        }&#10;        PurezaPNotatumDto dto = new PurezaPNotatumDto();&#10;        dto.setId(pureza.getId());&#10;        dto.setPorcentaje(pureza.getPorcentaje());&#10;        dto.setPesoInicial(pureza.getPesoInicial());&#10;        dto.setRepeticiones(pureza.getRepeticiones());&#10;        dto.setPi(pureza.getPi());&#10;        dto.setAt(pureza.getAt());&#10;        dto.setPorcentajeA(pureza.getPorcentajeA());&#10;        dto.setTotalA(pureza.getTotalA());&#10;        dto.setSemillasLS(pureza.getSemillasLS());&#10;        dto.setActivo(pureza.isActivo());&#10;        dto.setRepetido(pureza.isRepetido());&#10;        if (pureza.getRecibo() != null) {&#10;            dto.setReciboId(pureza.getRecibo().getId());&#10;        } else {&#10;            dto.setReciboId(null);&#10;        }&#10;        return dto;&#10;    }&#10;&#10;    public PurezaPNotatum mapToEntityPurezaPNotatum(PurezaPNotatumDto dto) {&#10;        if (dto == null) {&#10;            return null;&#10;        }&#10;        PurezaPNotatum pureza = new PurezaPNotatum();&#10;        pureza.setId(dto.getId());&#10;        pureza.setPorcentaje(dto.getPorcentaje());&#10;        pureza.setPesoInicial(dto.getPesoInicial());&#10;        pureza.setRepeticiones(dto.getRepeticiones());&#10;        pureza.setPi(dto.getPi());&#10;        pureza.setAt(dto.getAt());&#10;        pureza.setPorcentajeA(dto.getPorcentajeA());&#10;        pureza.setTotalA(dto.getTotalA());&#10;        pureza.setSemillasLS(dto.getSemillasLS());&#10;        pureza.setActivo(dto.isActivo());&#10;        pureza.setRepetido(dto.isRepetido());&#10;        if (dto.getReciboId() != null) {&#10;            Recibo recibo = new Recibo();&#10;            recibo.setId(dto.getReciboId());&#10;            pureza.setRecibo(recibo);&#10;        } else {&#10;            pureza.setRecibo(null);&#10;        }&#10;        return pureza;&#10;    }&#10;&#10;    public TetrazolioDto mapToDtoTetrazolio(Tetrazolio tetrazolio) {&#10;        if (tetrazolio == null) {&#10;            return null;&#10;        }&#10;        TetrazolioDto dto = new TetrazolioDto();&#10;        dto.setId(tetrazolio.getId());&#10;        dto.setRepeticion(tetrazolio.getRepeticion());&#10;        dto.setNroSemillasPorRepeticion(tetrazolio.getNroSemillasPorRepeticion());&#10;        if (tetrazolio.getPretratamiento() != null) {&#10;            dto.setPretratamientoId(tetrazolio.getPretratamiento().ordinal());&#10;        }&#10;        dto.setConcentracion(tetrazolio.getConcentracion());&#10;        dto.setTincionHoras(tetrazolio.getTincionHoras());&#10;        dto.setTincionGrados(tetrazolio.getTincionGrados());&#10;        dto.setFecha(tetrazolio.getFecha());&#10;        dto.setViables(tetrazolio.getViables());&#10;        dto.setNoViables(tetrazolio.getNoViables());&#10;        dto.setDuras(tetrazolio.getDuras());&#10;        dto.setTotal(tetrazolio.getTotal());&#10;        dto.setPromedio(tetrazolio.getPromedio());&#10;        dto.setPorcentaje(tetrazolio.getPorcentaje());&#10;&#10;        if (tetrazolio.getViabilidadPorTetrazolio() != null) {&#10;            dto.setViabilidadPorTetrazolio(tetrazolio.getViabilidadPorTetrazolio());&#10;        }&#10;&#10;        dto.setNroSemillas(tetrazolio.getNroSemillas());&#10;        dto.setDaniosNroSemillas(tetrazolio.getDaniosNroSemillas());&#10;        dto.setDaniosMecanicos(tetrazolio.getDaniosMecanicos());&#10;        dto.setDanioAmbiente(tetrazolio.getDanioAmbiente());&#10;        dto.setDaniosChinches(tetrazolio.getDaniosChinches());&#10;        dto.setDaniosFracturas(tetrazolio.getDaniosFracturas());&#10;        dto.setDaniosOtros(tetrazolio.getDaniosOtros());&#10;        dto.setDaniosDuras(tetrazolio.getDaniosDuras());&#10;&#10;        if (tetrazolio.getViabilidadVigorTz() != null) {&#10;            dto.setViabilidadVigorTz(tetrazolio.getViabilidadVigorTz());&#10;        }&#10;&#10;        dto.setPorcentajeFinal(tetrazolio.getPorcentajeFinal());&#10;        dto.setDaniosPorPorcentajes(tetrazolio.getDaniosPorPorcentajes());&#10;        dto.setActivo(tetrazolio.isActivo());&#10;        dto.setRepetido(tetrazolio.isRepetido());&#10;&#10;        return dto;&#10;    }&#10;&#10;    public Tetrazolio mapToEntityTetrazolio(TetrazolioDto dto) {&#10;        if (dto == null) {&#10;            return null;&#10;        }&#10;        Tetrazolio tetrazolio = new Tetrazolio();&#10;        tetrazolio.setId(dto.getId());&#10;        tetrazolio.setRepeticion(dto.getRepeticion());&#10;        tetrazolio.setNroSemillasPorRepeticion(dto.getNroSemillasPorRepeticion());&#10;&#10;        if (dto.getPretratamientoId() != null) {&#10;            tetrazolio.setPretratamiento(PreTratamiento.values()[dto.getPretratamientoId()]);&#10;        }&#10;&#10;        tetrazolio.setConcentracion(dto.getConcentracion());&#10;        tetrazolio.setTincionHoras(dto.getTincionHoras());&#10;        tetrazolio.setTincionGrados(dto.getTincionGrados());&#10;        tetrazolio.setFecha(dto.getFecha());&#10;        tetrazolio.setViables(dto.getViables());&#10;        tetrazolio.setNoViables(dto.getNoViables());&#10;        tetrazolio.setDuras(dto.getDuras());&#10;        tetrazolio.setTotal(dto.getTotal());&#10;        tetrazolio.setPromedio(dto.getPromedio());&#10;        tetrazolio.setPorcentaje(dto.getPorcentaje());&#10;        tetrazolio.setViabilidadPorTetrazolio(dto.getViabilidadPorTetrazolio());&#10;        tetrazolio.setViabilidadVigorTz(dto.getViabilidadVigorTz());&#10;        tetrazolio.setNroSemillas(dto.getNroSemillas());&#10;        tetrazolio.setDaniosNroSemillas(dto.getDaniosNroSemillas());&#10;        tetrazolio.setDaniosMecanicos(dto.getDaniosMecanicos());&#10;        tetrazolio.setDanioAmbiente(dto.getDanioAmbiente());&#10;        tetrazolio.setDaniosChinches(dto.getDaniosChinches());&#10;        tetrazolio.setDaniosFracturas(dto.getDaniosFracturas());&#10;        tetrazolio.setDaniosOtros(dto.getDaniosOtros());&#10;        tetrazolio.setDaniosDuras(dto.getDaniosDuras());&#10;        tetrazolio.setPorcentajeFinal(dto.getPorcentajeFinal());&#10;        tetrazolio.setDaniosPorPorcentajes(dto.getDaniosPorPorcentajes());&#10;        tetrazolio.setActivo(dto.isActivo());&#10;        tetrazolio.setRepetido(dto.isRepetido());&#10;&#10;        return tetrazolio;&#10;    }&#10;&#10;    public SanitarioHongoDto mapToDtoSanitarioHongo(SanitarioHongo entity) {&#10;        if (entity == null) return null;&#10;        SanitarioHongoDto dto = new SanitarioHongoDto();&#10;        dto.setId(entity.getId());&#10;        dto.setSanitarioId(entity.getSanitario() != null ? entity.getSanitario().getId() : null);&#10;        dto.setHongoId(entity.getHongo() != null ? entity.getHongo().getId() : null);&#10;        dto.setRepeticion(entity.getRepeticion());&#10;        dto.setValor(entity.getValor());&#10;        dto.setIncidencia(entity.getIncidencia());&#10;        return dto;&#10;    }&#10;&#10;    public SanitarioHongo mapToEntitySanitarioHongo(SanitarioHongoDto dto) {&#10;        if (dto == null) return null;&#10;        SanitarioHongo entity = new SanitarioHongo();&#10;        entity.setId(dto.getId());&#10;        if (dto.getSanitarioId() != null) {&#10;            Sanitario sanitario = new Sanitario();&#10;            sanitario.setId(dto.getSanitarioId());&#10;            entity.setSanitario(sanitario);&#10;        } else {&#10;            entity.setSanitario(null);&#10;        }&#10;        if (dto.getHongoId() != null) {&#10;            Hongo hongo = new Hongo();&#10;            hongo.setId(dto.getHongoId());&#10;            entity.setHongo(hongo);&#10;        } else {&#10;            entity.setHongo(null);&#10;        }&#10;        entity.setRepeticion(dto.getRepeticion());&#10;        entity.setValor(dto.getValor());&#10;        entity.setIncidencia(dto.getIncidencia());&#10;        return entity;&#10;    }&#10;&#10;    public SemillaDto mapToDtoSemilla(Semilla entity) {&#10;        if (entity == null) return null;&#10;        SemillaDto dto = new SemillaDto();&#10;        dto.setId(entity.getId());&#10;        dto.setNroSemillasPura(entity.getNroSemillasPura());&#10;        dto.setActivo(entity.isActivo());&#10;        return dto;&#10;    }&#10;&#10;    public Semilla mapToEntitySemilla(SemillaDto dto) {&#10;        if (dto == null) return null;&#10;        Semilla entity = new Semilla();&#10;        entity.setId(dto.getId());&#10;        entity.setNroSemillasPura(dto.getNroSemillasPura());&#10;        entity.setActivo(dto.isActivo());&#10;        return entity;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package ti.proyectoinia.services;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;import ti.proyectoinia.business.entities.*;&#10;import ti.proyectoinia.dtos.*;&#10;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class MapsDtoEntityService {&#10;&#10;    @Autowired&#10;    private PasswordEncoder passwordEncoder;&#10;&#10;    public HongoDto mapToDtoHongo(Hongo hongo) {&#10;        if (hongo == null) {&#10;            return null;&#10;        }&#10;&#10;        HongoDto hongoDto = new HongoDto();&#10;        hongoDto.setId(hongo.getId());&#10;        hongoDto.setNombre(hongo.getNombre());&#10;        hongoDto.setDescripcion(hongo.getDescripcion());&#10;        hongoDto.setActivo(hongo.isActivo());&#10;&#10;        return hongoDto;&#10;    }&#10;&#10;    public Hongo mapToEntityHongo(HongoDto hongoDto) {&#10;        if (hongoDto == null) {&#10;            return null;&#10;        }&#10;&#10;        Hongo hongo = new Hongo();&#10;        hongo.setId(hongoDto.getId());&#10;        hongo.setNombre(hongoDto.getNombre());&#10;        hongo.setDescripcion(hongo.getDescripcion());&#10;        hongo.setActivo(hongoDto.isActivo());&#10;&#10;        return hongo;&#10;    }&#10;&#10;    public GerminacionDto mapToDtoGerminacion(Germinacion germinacion) {&#10;        if (germinacion == null) {&#10;            return null;&#10;        }&#10;&#10;        GerminacionDto germinacionDto = new GerminacionDto();&#10;        germinacionDto.setId(germinacion.getId());&#10;        germinacionDto.setFechaInicio(germinacion.getFechaInicio());&#10;        germinacionDto.setFechaConteo1(germinacion.getFechaConteo1());&#10;        germinacionDto.setFechaConteo2(germinacion.getFechaConteo2());&#10;        germinacionDto.setFechaConteo3(germinacion.getFechaConteo3());&#10;        germinacionDto.setFechaConteo4(germinacion.getFechaConteo4());&#10;        germinacionDto.setFechaConteo5(germinacion.getFechaConteo5());&#10;        germinacionDto.setTotalDias(germinacion.getTotalDias());&#10;        germinacionDto.setRepeticionNormal1(germinacion.getRepeticionNormal1());&#10;        germinacionDto.setRepeticionNormal2(germinacion.getRepeticionNormal2());&#10;        germinacionDto.setRepeticionNormal3(germinacion.getRepeticionNormal3());&#10;        germinacionDto.setRepeticionNormal4(germinacion.getRepeticionNormal4());&#10;        germinacionDto.setRepeticionNormal5(germinacion.getRepeticionNormal5());&#10;        germinacionDto.setRepeticionDura(germinacion.getRepeticionDura());&#10;        germinacionDto.setRepeticionFresca(germinacion.getRepeticionFresca());&#10;        germinacionDto.setRepeticionAnormal(germinacion.getRepeticionAnormal());&#10;        germinacionDto.setRepeticionMuerta(germinacion.getRepeticionMuerta());&#10;        germinacionDto.setTotalRepeticion(germinacion.getTotalRepeticion());&#10;        germinacionDto.setPromedioRepeticiones(germinacion.getPromedioRepeticiones());&#10;        germinacionDto.setTratamiento(germinacion.getTratamiento());&#10;        germinacionDto.setNroSemillaPorRepeticion(germinacion.getNroSemillaPorRepeticion());&#10;        germinacionDto.setMetodo(germinacion.getMetodo());&#10;        germinacionDto.setTemperatura(germinacion.getTemperatura());&#10;        germinacionDto.setPreFrio(germinacion.getPreFrio());&#10;        germinacionDto.setPreTratamiento(germinacion.getPreTratamiento());&#10;        germinacionDto.setNroDias(germinacion.getNroDias());&#10;        germinacionDto.setFechaFinal(germinacion.getFechaFinal());&#10;        germinacionDto.setPRedondeo(germinacion.getPRedondeo());&#10;        germinacionDto.setPNormal(germinacion.getPNormal());&#10;        germinacionDto.setPAnormal(germinacion.getPAnormal());&#10;        germinacionDto.setPMuertas(germinacion.getPMuertas());&#10;        germinacionDto.setSemillasDuras(germinacion.getSemillasDuras());&#10;        germinacionDto.setGerminacion(germinacion.getGerminacion());&#10;        germinacionDto.setComentarios(germinacion.getComentarios());&#10;        germinacionDto.setRepetido(germinacion.isRepetido());&#10;&#10;&#10;        if (germinacion.getRecibo() != null) {&#10;            germinacionDto.setReciboId(germinacion.getRecibo().getId());&#10;        } else {&#10;            germinacionDto.setReciboId(null);&#10;        }&#10;        germinacionDto.setActivo(germinacion.isActivo());&#10;&#10;        return germinacionDto;&#10;    }&#10;&#10;    public Germinacion mapToEntityGerminacion(GerminacionDto germinacionDto) {&#10;        if (germinacionDto == null) {&#10;            return null;&#10;        }&#10;&#10;        Germinacion germinacion = new Germinacion();&#10;        germinacion.setId(germinacionDto.getId());&#10;        germinacion.setFechaInicio(germinacionDto.getFechaInicio());&#10;        germinacion.setFechaConteo1(germinacionDto.getFechaConteo1());&#10;        germinacion.setFechaConteo2(germinacionDto.getFechaConteo2());&#10;        germinacion.setFechaConteo3(germinacionDto.getFechaConteo3());&#10;        germinacion.setFechaConteo4(germinacionDto.getFechaConteo4());&#10;        germinacion.setFechaConteo5(germinacionDto.getFechaConteo5());&#10;        germinacion.setTotalDias(germinacionDto.getTotalDias());&#10;        germinacion.setRepeticionNormal1(germinacionDto.getRepeticionNormal1());&#10;        germinacion.setRepeticionNormal2(germinacionDto.getRepeticionNormal2());&#10;        germinacion.setRepeticionNormal3(germinacionDto.getRepeticionNormal3());&#10;        germinacion.setRepeticionNormal4(germinacionDto.getRepeticionNormal4());&#10;        germinacion.setRepeticionNormal5(germinacionDto.getRepeticionNormal5());&#10;        germinacion.setRepeticionDura(germinacionDto.getRepeticionDura());&#10;        germinacion.setRepeticionFresca(germinacionDto.getRepeticionFresca());&#10;        germinacion.setRepeticionAnormal(germinacionDto.getRepeticionAnormal());&#10;        germinacion.setRepeticionMuerta(germinacionDto.getRepeticionMuerta());&#10;        germinacion.setTotalRepeticion(germinacionDto.getTotalRepeticion());&#10;        germinacion.setPromedioRepeticiones(germinacionDto.getPromedioRepeticiones());&#10;        germinacion.setTratamiento(germinacionDto.getTratamiento());&#10;        germinacion.setNroSemillaPorRepeticion(germinacionDto.getNroSemillaPorRepeticion());&#10;        germinacion.setMetodo(germinacionDto.getMetodo());&#10;        germinacion.setTemperatura(germinacionDto.getTemperatura());&#10;        germinacion.setPreFrio(germinacionDto.getPreFrio());&#10;        germinacion.setPreTratamiento(germinacionDto.getPreTratamiento());&#10;        germinacion.setNroDias(germinacionDto.getNroDias());&#10;        germinacion.setFechaFinal(germinacionDto.getFechaFinal());&#10;        germinacion.setPRedondeo(germinacionDto.getPRedondeo());&#10;        germinacion.setPNormal(germinacionDto.getPNormal());&#10;        germinacion.setPAnormal(germinacionDto.getPAnormal());&#10;        germinacion.setPMuertas(germinacionDto.getPMuertas());&#10;        germinacion.setSemillasDuras(germinacionDto.getSemillasDuras());&#10;        germinacion.setGerminacion(germinacionDto.getGerminacion());&#10;        germinacion.setComentarios(germinacionDto.getComentarios());&#10;        germinacion.setRepetido(germinacionDto.isRepetido());&#10;        germinacion.setActivo(germinacionDto.isActivo());&#10;&#10;&#10;        if (germinacionDto.getReciboId() != null) {&#10;            Recibo recibo = new Recibo();&#10;            recibo.setId(germinacionDto.getReciboId());&#10;            germinacion.setRecibo(recibo);&#10;        } else {&#10;            germinacion.setRecibo(null);&#10;        }&#10;&#10;&#10;        return germinacion;&#10;    }&#10;&#10;    public ti.proyectoinia.dtos.ReciboDto mapToDtoRecibo(ti.proyectoinia.business.entities.Recibo recibo) {&#10;        if (recibo == null) {&#10;            return null;&#10;        }&#10;&#10;        ti.proyectoinia.dtos.ReciboDto reciboDto = new ti.proyectoinia.dtos.ReciboDto();&#10;        reciboDto.setId(recibo.getId());&#10;        reciboDto.setNroAnalisis(recibo.getNroAnalisis());&#10;        reciboDto.setEspecie(recibo.getEspecie());&#10;        reciboDto.setFicha(recibo.getFicha());&#10;        reciboDto.setFechaRecibo(recibo.getFechaRecibo());&#10;        reciboDto.setRemitente(recibo.getRemitente());&#10;        reciboDto.setOrigen(recibo.getOrigen());&#10;        reciboDto.setCultivar(recibo.getCultivar());&#10;        reciboDto.setDeposito(recibo.getDeposito());&#10;        reciboDto.setEstado(recibo.getEstado());&#10;        reciboDto.setLote(recibo.getLote());&#10;        reciboDto.setKgLimpios(recibo.getKgLimpios());&#10;        reciboDto.setAnalisisSolicitados(recibo.getAnalisisSolicitados());&#10;        reciboDto.setArticulo(recibo.getArticulo());&#10;        reciboDto.setActivo(recibo.isActivo());&#10;&#10;        return reciboDto;&#10;    }&#10;&#10;    public ti.proyectoinia.business.entities.Recibo mapToEntityRecibo(ti.proyectoinia.dtos.ReciboDto reciboDto) {&#10;        if (reciboDto == null) {&#10;            return null;&#10;        }&#10;&#10;        ti.proyectoinia.business.entities.Recibo recibo = new ti.proyectoinia.business.entities.Recibo();&#10;        if (reciboDto.getId() != null) {&#10;            recibo.setId(reciboDto.getId());&#10;        }&#10;&#10;        recibo.setNroAnalisis(reciboDto.getNroAnalisis());&#10;        recibo.setEspecie(reciboDto.getEspecie());&#10;        recibo.setFicha(reciboDto.getFicha());&#10;        recibo.setFechaRecibo(reciboDto.getFechaRecibo());&#10;        recibo.setRemitente(reciboDto.getRemitente());&#10;        recibo.setOrigen(reciboDto.getOrigen());&#10;        recibo.setCultivar(reciboDto.getCultivar());&#10;        recibo.setDeposito(reciboDto.getDeposito());&#10;        recibo.setEstado(reciboDto.getEstado());&#10;        recibo.setLote(reciboDto.getLote());&#10;        recibo.setKgLimpios(reciboDto.getKgLimpios());&#10;        recibo.setAnalisisSolicitados(reciboDto.getAnalisisSolicitados());&#10;        recibo.setArticulo(reciboDto.getArticulo());&#10;        recibo.setActivo(reciboDto.isActivo());&#10;&#10;        return recibo;&#10;    }&#10;&#10;    public MalezaDto mapToDtoMaleza(Maleza maleza) {&#10;        if (maleza == null) {&#10;            return null;&#10;        }&#10;&#10;        MalezaDto malezaDto = new MalezaDto();&#10;        malezaDto.setId(maleza.getId());&#10;        malezaDto.setNombre(maleza.getNombre());&#10;        malezaDto.setDescripcion(malezaDto.getDescripcion());&#10;        malezaDto.setActivo(maleza.isActivo());&#10;        return malezaDto;&#10;&#10;    }&#10;&#10;    public Maleza mapToEntityMaleza(MalezaDto malezaDto) {&#10;        if (malezaDto == null) {&#10;            return null;&#10;        }&#10;&#10;        Maleza maleza = new Maleza();&#10;        maleza.setId(malezaDto.getId());&#10;        maleza.setNombre(malezaDto.getNombre());&#10;        maleza.setDescripcion(malezaDto.getDescripcion());&#10;        maleza.setActivo(malezaDto.isActivo());&#10;&#10;        return maleza;&#10;    }&#10;&#10;    public SanitarioDto mapToDtoSanitario(Sanitario sanitario) {&#10;        if (sanitario == null) {&#10;            return null;&#10;        }&#10;&#10;        SanitarioDto sanitarioDto = new SanitarioDto();&#10;        sanitarioDto.setId(sanitario.getId());&#10;        sanitarioDto.setFechaSiembra(sanitario.getFechaSiembra());&#10;        sanitarioDto.setFecha(sanitario.getFecha());&#10;        sanitarioDto.setMetodo(sanitario.getMetodo());&#10;        sanitarioDto.setTemperatura(sanitario.getTemperatura());&#10;        sanitarioDto.setHorasLuzOscuridad(sanitario.getHorasLuzOscuridad());&#10;        sanitarioDto.setNroDias(sanitario.getNroDias());&#10;        sanitarioDto.setEstadoProductoDosis(sanitario.getEstadoProductoDosis());&#10;        sanitarioDto.setObservaciones(sanitario.getObservaciones());&#10;        sanitarioDto.setNroSemillasRepeticion(sanitario.getNroSemillasRepeticion());&#10;        sanitarioDto.setActivo(sanitario.isActivo());&#10;        sanitarioDto.setRepetido(sanitario.isRepetido());&#10;&#10;        if (sanitario.getRecibo() != null) {&#10;            sanitarioDto.setReciboId(sanitario.getRecibo().getId());&#10;        } else {&#10;            sanitarioDto.setReciboId(null);&#10;        }&#10;&#10;        if (sanitario.getSanitarioHongos() != null) {&#10;            sanitarioDto.setSanitarioHongoids(&#10;                sanitario.getSanitarioHongos().stream()&#10;                    .map(SanitarioHongo::getId)&#10;                    .collect(Collectors.toList())&#10;            );&#10;        } else {&#10;            sanitarioDto.setSanitarioHongoids(null);&#10;        }&#10;&#10;        return sanitarioDto;&#10;    }&#10;&#10;    public Sanitario mapToEntitySanitario(SanitarioDto sanitarioDto) {&#10;        if (sanitarioDto == null) {&#10;            return null;&#10;        }&#10;&#10;        Sanitario sanitario = new Sanitario();&#10;        sanitario.setId(sanitarioDto.getId());&#10;        sanitario.setFechaSiembra(sanitarioDto.getFechaSiembra());&#10;        sanitario.setFecha(sanitarioDto.getFecha());&#10;        sanitario.setMetodo(sanitarioDto.getMetodo());&#10;        sanitario.setTemperatura(sanitarioDto.getTemperatura());&#10;        sanitario.setHorasLuzOscuridad(sanitarioDto.getHorasLuzOscuridad());&#10;        sanitario.setNroDias(sanitarioDto.getNroDias());&#10;        sanitario.setEstadoProductoDosis(sanitarioDto.getEstadoProductoDosis());&#10;        sanitario.setObservaciones(sanitarioDto.getObservaciones());&#10;        sanitario.setNroSemillasRepeticion(sanitarioDto.getNroSemillasRepeticion());&#10;        sanitario.setActivo(sanitarioDto.isActivo());&#10;        sanitario.setRepetido(sanitarioDto.isRepetido());&#10;&#10;        if (sanitarioDto.getReciboId() != null) {&#10;            Recibo recibo = new Recibo();&#10;            recibo.setId(sanitarioDto.getReciboId());&#10;            sanitario.setRecibo(recibo);&#10;        } else {&#10;            sanitario.setRecibo(null);&#10;        }&#10;&#10;        // Traducción de IDs a entidades SanitarioHongo&#10;        if (sanitarioDto.getSanitarioHongoids() != null) {&#10;            List&lt;SanitarioHongo&gt; sanitarioHongos = sanitarioDto.getSanitarioHongoids().stream()&#10;                .map(id -&gt; {&#10;                    SanitarioHongo sh = new SanitarioHongo();&#10;                    sh.setId(id);&#10;                    sh.setSanitario(sanitario);&#10;                    return sh;&#10;                })&#10;                .collect(Collectors.toList());&#10;            sanitario.setSanitarioHongos(sanitarioHongos);&#10;        } else {&#10;            sanitario.setSanitarioHongos(null);&#10;        }&#10;&#10;        return sanitario;&#10;    }&#10;&#10;    public PMSDto mapToDtoPMS(PMS pms) {&#10;        if (pms == null) {&#10;            return null;&#10;        }&#10;&#10;        PMSDto pmsDto = new PMSDto();&#10;        pmsDto.setId(pms.getId());&#10;        pmsDto.setPesoMilSemillas(pms.getPesoMilSemillas());&#10;        pmsDto.setHumedadPorcentual(pms.getHumedadPorcentual());&#10;        pmsDto.setFechaMedicion(pms.getFechaMedicion());&#10;        pmsDto.setMetodo(pms.getMetodo());&#10;        pmsDto.setObservaciones(pms.getObservaciones());&#10;        pmsDto.setActivo(pms.isActivo());&#10;        pmsDto.setRepetido(pms.isRepetido());&#10;&#10;        if (pms.getRecibo() != null) {&#10;            pmsDto.setReciboId(pms.getRecibo().getId());&#10;        } else {&#10;            pmsDto.setReciboId(null);&#10;        }&#10;        return pmsDto;&#10;    }&#10;&#10;    public PMS mapToEntityPMS(PMSDto pmsDto) {&#10;        if (pmsDto == null) {&#10;            return null;&#10;        }&#10;        PMS pms = new PMS();&#10;        pms.setId(pmsDto.getId());&#10;        pms.setPesoMilSemillas(pmsDto.getPesoMilSemillas());&#10;        pms.setHumedadPorcentual(pmsDto.getHumedadPorcentual());&#10;        pms.setFechaMedicion(pmsDto.getFechaMedicion());&#10;        pms.setMetodo(pmsDto.getMetodo());&#10;        pms.setObservaciones(pmsDto.getObservaciones());&#10;        pms.setActivo(pmsDto.isActivo());&#10;        pms.setRepetido(pmsDto.isRepetido());&#10;        if (pmsDto.getReciboId() != null) {&#10;            Recibo recibo = new Recibo();&#10;            recibo.setId(pmsDto.getReciboId());&#10;            pms.setRecibo(recibo);&#10;        } else {&#10;            pms.setRecibo(null);&#10;        }&#10;        return pms;&#10;    }&#10;&#10;    public PurezaDto mapToDtoPureza(Pureza pureza) {&#10;        if (pureza == null) {&#10;            return null;&#10;        }&#10;&#10;        PurezaDto dto = new PurezaDto();&#10;        dto.setId(pureza.getId());&#10;        dto.setFecha(pureza.getFecha());&#10;        dto.setPesoInicial(pureza.getPesoInicial());&#10;        dto.setSemillaPura(pureza.getSemillaPura());&#10;        dto.setMaterialInerte(pureza.getMaterialInerte());&#10;        dto.setOtrosCultivos(pureza.getOtrosCultivos());&#10;        dto.setMalezas(pureza.getMalezas());&#10;        dto.setMalezasToleradas(pureza.getMalezasToleradas());&#10;        dto.setPesoTotal(pureza.getPesoTotal());&#10;        dto.setOtrosCultivo(pureza.getOtrosCultivo());&#10;        dto.setFechaEstandar(pureza.getFechaEstandar());&#10;        dto.setEstandar(pureza.getEstandar());&#10;        dto.setActivo(pureza.isActivo());&#10;        dto.setRepetido(pureza.isRepetido());&#10;&#10;        if (pureza.getRecibo() != null) {&#10;            dto.setReciboId(pureza.getRecibo().getId());&#10;        } else {&#10;            dto.setReciboId(null);&#10;        }&#10;        return dto;&#10;    }&#10;&#10;    public Pureza mapToEntityPureza(PurezaDto dto) {&#10;        if (dto == null) {&#10;            return null;&#10;        }&#10;&#10;        Pureza pureza = new Pureza();&#10;&#10;        if (dto.getId() != null) {&#10;            pureza.setId(dto.getId());&#10;        }&#10;&#10;        pureza.setFecha(dto.getFecha());&#10;        pureza.setPesoInicial(dto.getPesoInicial());&#10;        pureza.setSemillaPura(dto.getSemillaPura());&#10;        pureza.setMaterialInerte(dto.getMaterialInerte());&#10;        pureza.setOtrosCultivos(dto.getOtrosCultivos());&#10;        pureza.setMalezas(dto.getMalezas());&#10;        pureza.setMalezasToleradas(dto.getMalezasToleradas());&#10;        pureza.setPesoTotal(dto.getPesoTotal());&#10;        pureza.setOtrosCultivo(dto.getOtrosCultivo());&#10;        pureza.setFechaEstandar(dto.getFechaEstandar());&#10;        pureza.setEstandar(dto.isEstandar());&#10;        pureza.setActivo(dto.isActivo());&#10;        pureza.setRepetido(dto.isRepetido());&#10;&#10;        if (dto.getReciboId() != null) {&#10;            Recibo recibo = new Recibo();&#10;            recibo.setId(dto.getReciboId());&#10;            pureza.setRecibo(recibo);&#10;        } else {&#10;            pureza.setRecibo(null);&#10;        }&#10;&#10;        return pureza;&#10;    }&#10;&#10;    public LoteDto mapToDtoLote(Lote lote) {&#10;        if (lote == null) {&#10;            return null;&#10;        }&#10;&#10;        LoteDto loteDto = new LoteDto();&#10;        loteDto.setId(lote.getId());&#10;        loteDto.setNombre(lote.getNombre());&#10;        loteDto.setActivo(lote.isActivo());&#10;        loteDto.setDescripcion(lote.getDescripcion());&#10;        loteDto.setFechaCreacion(lote.getFechaCreacion());&#10;        loteDto.setFechaFinalizacion(lote.getFechaFinalizacion());&#10;&#10;        if (lote.getUsuarios() != null) {&#10;            loteDto.setUsuariosId(lote.getUsuarios().stream().map(Usuario::getId).collect(Collectors.toList()));&#10;        } else {&#10;            loteDto.setUsuariosId(null);&#10;        }&#10;&#10;        return loteDto;&#10;    }&#10;&#10;    public Lote mapToEntityLote(LoteDto loteDto) {&#10;        if (loteDto == null) {&#10;            return null;&#10;        }&#10;&#10;        Lote lote = new Lote();&#10;        lote.setId(loteDto.getId());&#10;        lote.setNombre(loteDto.getNombre());&#10;        lote.setActivo(loteDto.isActivo());&#10;        lote.setDescripcion(loteDto.getDescripcion());&#10;        lote.setFechaCreacion(loteDto.getFechaCreacion());&#10;        lote.setFechaFinalizacion(loteDto.getFechaFinalizacion());&#10;&#10;        if (loteDto.getUsuariosId() != null) {&#10;            lote.setUsuarios(loteDto.getUsuariosId().stream().map(id -&gt; {&#10;                Usuario usuario = new Usuario();&#10;                usuario.setId(id);&#10;                return usuario;&#10;            }).collect(Collectors.toList()));&#10;        } else {&#10;            lote.setUsuarios(null);&#10;        }&#10;&#10;        return lote;&#10;    }&#10;&#10;    public UsuarioDto mapToDtoUsuario(Usuario usuario) {&#10;        if (usuario == null) {&#10;            return null;&#10;        }&#10;&#10;        UsuarioDto usuarioDto = new UsuarioDto();&#10;        usuarioDto.setId(usuario.getId());&#10;        usuarioDto.setEmail(usuario.getEmail());&#10;        usuarioDto.setNombre(usuario.getNombre());&#10;        usuarioDto.setPassword(usuario.getPassword());&#10;        usuarioDto.setRol(usuario.getRol());&#10;        usuarioDto.setActivo(usuario.isActivo());&#10;&#10;        if (usuario.getLotes() != null) {&#10;            usuarioDto.setLotesId(usuario.getLotes().stream().map(Lote::getId).collect(Collectors.toList()));&#10;        } else {&#10;            usuarioDto.setLotesId(null);&#10;        }&#10;&#10;        return usuarioDto;&#10;    }&#10;&#10;    public Usuario mapToEntityUsuario(UsuarioDto usuarioDto) {&#10;        if (usuarioDto == null) {&#10;            return null;&#10;        }&#10;&#10;        Usuario usuario = new Usuario();&#10;        usuario.setId(usuarioDto.getId());&#10;        usuario.setEmail(usuarioDto.getEmail());&#10;        usuario.setNombre(usuarioDto.getNombre());&#10;        &#10;        // Encriptar la contraseña si no está vacía&#10;        if (usuarioDto.getPassword() != null &amp;&amp; !usuarioDto.getPassword().trim().isEmpty()) {&#10;            usuario.setPassword(passwordEncoder.encode(usuarioDto.getPassword()));&#10;        } else {&#10;            usuario.setPassword(usuarioDto.getPassword());&#10;        }&#10;        &#10;        usuario.setRol(usuarioDto.getRol());&#10;        usuario.setActivo(usuarioDto.isActivo());&#10;&#10;        if (usuarioDto.getLotesId() != null) {&#10;            usuario.setLotes(usuarioDto.getLotesId().stream().map(id -&gt; {&#10;                Lote lote = new Lote();&#10;                lote.setId(id);&#10;                return lote;&#10;            }).collect(Collectors.toList()));&#10;        } else {&#10;            usuario.setLotes(null);&#10;        }&#10;&#10;        return usuario;&#10;    }&#10;&#10;&#10;    private UsuarioDto mapToDtoUsuarioBasic(Usuario usuario) {&#10;        if (usuario == null) return null;&#10;&#10;        UsuarioDto dto = new UsuarioDto();&#10;        dto.setId(usuario.getId());&#10;        dto.setNombre(usuario.getNombre());&#10;        dto.setEmail(usuario.getEmail());&#10;&#10;        return dto;&#10;    }&#10;&#10;    private Usuario mapToEntityUsuarioBasic(UsuarioDto usuarioDto) {&#10;        if (usuarioDto == null) return null;&#10;&#10;        Usuario usuario = new Usuario();&#10;        usuario.setId(usuarioDto.getId());&#10;        usuario.setNombre(usuarioDto.getNombre());&#10;        usuario.setEmail(usuarioDto.getEmail());&#10;&#10;        return usuario;&#10;    }&#10;&#10;    private LoteDto mapToDtoLoteBasic(Lote lote) {&#10;        if (lote == null) return null;&#10;&#10;        LoteDto dto = new LoteDto();&#10;        dto.setId(lote.getId());&#10;        dto.setNombre(lote.getNombre());&#10;&#10;        return dto;&#10;    }&#10;    private Lote mapToEntityLoteBasic(LoteDto loteDto) {&#10;        if (loteDto == null) return null;&#10;&#10;        Lote lote = new Lote();&#10;        lote.setId(loteDto.getId());&#10;        lote.setNombre(loteDto.getNombre());&#10;&#10;        return lote;&#10;    }&#10;&#10;    public DOSNDto mapToDtoDOSN(DOSN dosn) {&#10;        if (dosn == null) {&#10;            return null;&#10;        }&#10;&#10;        DOSNDto dto = new DOSNDto();&#10;        dto.setId(dosn.getId());&#10;        dto.setFecha(dosn.getFecha());&#10;        dto.setGramosAnalizados(dosn.getGramosAnalizados());&#10;        dto.setTiposDeanalisis(dosn.getTiposDeanalisis());&#10;        dto.setCompletoReducido(dosn.getCompletoReducido());&#10;        dto.setMalezasToleranciaCero(dosn.getMalezasToleranciaCero());&#10;        dto.setOtrosCultivos(dosn.getOtrosCultivos());&#10;        dto.setDeterminacionBrassica(dosn.getDeterminacionBrassica());&#10;        dto.setDeterminacionCuscuta(dosn.getDeterminacionCuscuta());&#10;        dto.setEstandar(dosn.getEstandar());&#10;        dto.setFechaAnalisis(dosn.getFechaAnalisis());&#10;        dto.setActivo(dosn.isActivo());&#10;        dto.setRepetido(dosn.isRepetido());&#10;&#10;        if (dosn.getCultivos() != null) {&#10;            dto.setCultivos(dosn.getCultivos().stream().map(this::mapToDtoCultivo).collect(Collectors.toList()));&#10;        } else {&#10;            dto.setCultivos(null);&#10;        }&#10;        return dto;&#10;    }&#10;&#10;    public DOSN mapToEntityDOSN(DOSNDto dto) {&#10;        if (dto == null) {&#10;            return null;&#10;        }&#10;        DOSN dosn = new DOSN();&#10;        dosn.setId(dto.getId());&#10;        dosn.setFecha(dto.getFecha());&#10;        dosn.setGramosAnalizados(dto.getGramosAnalizados());&#10;        dosn.setTiposDeanalisis(dto.getTiposDeanalisis());&#10;        dosn.setCompletoReducido(dto.isCompletoReducido());&#10;        dosn.setMalezasToleranciaCero(dto.getMalezasToleranciaCero());&#10;        dosn.setOtrosCultivos(dto.getOtrosCultivos());&#10;        dosn.setDeterminacionBrassica(dto.getDeterminacionBrassica());&#10;        dosn.setDeterminacionCuscuta(dto.getDeterminacionCuscuta());&#10;        dosn.setEstandar(dto.isEstandar());&#10;        dosn.setActivo(dto.isActivo());&#10;        dosn.setFechaAnalisis(dto.getFechaAnalisis());&#10;        dosn.setRepetido(dto.isRepetido());&#10;&#10;        if (dto.getCultivos() != null) {&#10;            dosn.setCultivos(dto.getCultivos().stream().map(this::mapToEntityCultivo).collect(Collectors.toList()));&#10;        } else {&#10;            dosn.setCultivos(null);&#10;        }&#10;        return dosn;&#10;    }&#10;&#10;    private CultivoDto mapToDtoCultivo(Cultivo cultivo) {&#10;        if (cultivo == null) return null;&#10;&#10;        CultivoDto dto = new CultivoDto();&#10;        dto.setId(cultivo.getId());&#10;        dto.setNombre(cultivo.getNombre());&#10;        dto.setDescripcion(cultivo.getDescripcion());&#10;        dto.setActivo(cultivo.isActivo());&#10;&#10;        return dto;&#10;    }&#10;    private Cultivo mapToEntityCultivo(CultivoDto dto) {&#10;        if (dto == null) return null;&#10;&#10;        Cultivo cultivo = new Cultivo();&#10;        cultivo.setId(dto.getId());&#10;        cultivo.setNombre(dto.getNombre());&#10;        cultivo.setDescripcion(dto.getDescripcion());&#10;        cultivo.setActivo(dto.isActivo());&#10;&#10;        return cultivo;&#10;    }&#10;&#10;    public PurezaPNotatumDto mapToDtoPurezaPNotatum(PurezaPNotatum pureza) {&#10;        if (pureza == null) {&#10;            return null;&#10;        }&#10;        PurezaPNotatumDto dto = new PurezaPNotatumDto();&#10;        dto.setId(pureza.getId());&#10;        dto.setPorcentaje(pureza.getPorcentaje());&#10;        dto.setPesoInicial(pureza.getPesoInicial());&#10;        dto.setRepeticiones(pureza.getRepeticiones());&#10;        dto.setPi(pureza.getPi());&#10;        dto.setAt(pureza.getAt());&#10;        dto.setPorcentajeA(pureza.getPorcentajeA());&#10;        dto.setTotalA(pureza.getTotalA());&#10;        dto.setSemillasLS(pureza.getSemillasLS());&#10;        dto.setActivo(pureza.isActivo());&#10;        dto.setRepetido(pureza.isRepetido());&#10;        if (pureza.getRecibo() != null) {&#10;            dto.setReciboId(pureza.getRecibo().getId());&#10;        } else {&#10;            dto.setReciboId(null);&#10;        }&#10;        return dto;&#10;    }&#10;&#10;    public PurezaPNotatum mapToEntityPurezaPNotatum(PurezaPNotatumDto dto) {&#10;        if (dto == null) {&#10;            return null;&#10;        }&#10;        PurezaPNotatum pureza = new PurezaPNotatum();&#10;        pureza.setId(dto.getId());&#10;        pureza.setPorcentaje(dto.getPorcentaje());&#10;        pureza.setPesoInicial(dto.getPesoInicial());&#10;        pureza.setRepeticiones(dto.getRepeticiones());&#10;        pureza.setPi(dto.getPi());&#10;        pureza.setAt(dto.getAt());&#10;        pureza.setPorcentajeA(dto.getPorcentajeA());&#10;        pureza.setTotalA(dto.getTotalA());&#10;        pureza.setSemillasLS(dto.getSemillasLS());&#10;        pureza.setActivo(dto.isActivo());&#10;        pureza.setRepetido(dto.isRepetido());&#10;        if (dto.getReciboId() != null) {&#10;            Recibo recibo = new Recibo();&#10;            recibo.setId(dto.getReciboId());&#10;            pureza.setRecibo(recibo);&#10;        } else {&#10;            pureza.setRecibo(null);&#10;        }&#10;        return pureza;&#10;    }&#10;&#10;    public TetrazolioDto mapToDtoTetrazolio(Tetrazolio tetrazolio) {&#10;        if (tetrazolio == null) {&#10;            return null;&#10;        }&#10;        TetrazolioDto dto = new TetrazolioDto();&#10;        dto.setId(tetrazolio.getId());&#10;        dto.setRepeticion(tetrazolio.getRepeticion());&#10;        dto.setNroSemillasPorRepeticion(tetrazolio.getNroSemillasPorRepeticion());&#10;        if (tetrazolio.getPretratamiento() != null) {&#10;            dto.setPretratamientoId(tetrazolio.getPretratamiento().ordinal());&#10;        }&#10;        dto.setConcentracion(tetrazolio.getConcentracion());&#10;        dto.setTincionHoras(tetrazolio.getTincionHoras());&#10;        dto.setTincionGrados(tetrazolio.getTincionGrados());&#10;        dto.setFecha(tetrazolio.getFecha());&#10;        dto.setViables(tetrazolio.getViables());&#10;        dto.setNoViables(tetrazolio.getNoViables());&#10;        dto.setDuras(tetrazolio.getDuras());&#10;        dto.setTotal(tetrazolio.getTotal());&#10;        dto.setPromedio(tetrazolio.getPromedio());&#10;        dto.setPorcentaje(tetrazolio.getPorcentaje());&#10;&#10;        if (tetrazolio.getViabilidadPorTetrazolio() != null) {&#10;            dto.setViabilidadPorTetrazolio(tetrazolio.getViabilidadPorTetrazolio());&#10;        }&#10;&#10;        dto.setNroSemillas(tetrazolio.getNroSemillas());&#10;        dto.setDaniosNroSemillas(tetrazolio.getDaniosNroSemillas());&#10;        dto.setDaniosMecanicos(tetrazolio.getDaniosMecanicos());&#10;        dto.setDanioAmbiente(tetrazolio.getDanioAmbiente());&#10;        dto.setDaniosChinches(tetrazolio.getDaniosChinches());&#10;        dto.setDaniosFracturas(tetrazolio.getDaniosFracturas());&#10;        dto.setDaniosOtros(tetrazolio.getDaniosOtros());&#10;        dto.setDaniosDuras(tetrazolio.getDaniosDuras());&#10;&#10;        if (tetrazolio.getViabilidadVigorTz() != null) {&#10;            dto.setViabilidadVigorTz(tetrazolio.getViabilidadVigorTz());&#10;        }&#10;&#10;        dto.setPorcentajeFinal(tetrazolio.getPorcentajeFinal());&#10;        dto.setDaniosPorPorcentajes(tetrazolio.getDaniosPorPorcentajes());&#10;        dto.setActivo(tetrazolio.isActivo());&#10;        dto.setRepetido(tetrazolio.isRepetido());&#10;&#10;        return dto;&#10;    }&#10;&#10;    public Tetrazolio mapToEntityTetrazolio(TetrazolioDto dto) {&#10;        if (dto == null) {&#10;            return null;&#10;        }&#10;        Tetrazolio tetrazolio = new Tetrazolio();&#10;        tetrazolio.setId(dto.getId());&#10;        tetrazolio.setRepeticion(dto.getRepeticion());&#10;        tetrazolio.setNroSemillasPorRepeticion(dto.getNroSemillasPorRepeticion());&#10;&#10;        if (dto.getPretratamientoId() != null) {&#10;            tetrazolio.setPretratamiento(PreTratamiento.values()[dto.getPretratamientoId()]);&#10;        }&#10;&#10;        tetrazolio.setConcentracion(dto.getConcentracion());&#10;        tetrazolio.setTincionHoras(dto.getTincionHoras());&#10;        tetrazolio.setTincionGrados(dto.getTincionGrados());&#10;        tetrazolio.setFecha(dto.getFecha());&#10;        tetrazolio.setViables(dto.getViables());&#10;        tetrazolio.setNoViables(dto.getNoViables());&#10;        tetrazolio.setDuras(dto.getDuras());&#10;        tetrazolio.setTotal(dto.getTotal());&#10;        tetrazolio.setPromedio(dto.getPromedio());&#10;        tetrazolio.setPorcentaje(dto.getPorcentaje());&#10;        tetrazolio.setViabilidadPorTetrazolio(dto.getViabilidadPorTetrazolio());&#10;        tetrazolio.setViabilidadVigorTz(dto.getViabilidadVigorTz());&#10;        tetrazolio.setNroSemillas(dto.getNroSemillas());&#10;        tetrazolio.setDaniosNroSemillas(dto.getDaniosNroSemillas());&#10;        tetrazolio.setDaniosMecanicos(dto.getDaniosMecanicos());&#10;        tetrazolio.setDanioAmbiente(dto.getDanioAmbiente());&#10;        tetrazolio.setDaniosChinches(dto.getDaniosChinches());&#10;        tetrazolio.setDaniosFracturas(dto.getDaniosFracturas());&#10;        tetrazolio.setDaniosOtros(dto.getDaniosOtros());&#10;        tetrazolio.setDaniosDuras(dto.getDaniosDuras());&#10;        tetrazolio.setPorcentajeFinal(dto.getPorcentajeFinal());&#10;        tetrazolio.setDaniosPorPorcentajes(dto.getDaniosPorPorcentajes());&#10;        tetrazolio.setActivo(dto.isActivo());&#10;        tetrazolio.setRepetido(dto.isRepetido());&#10;&#10;        return tetrazolio;&#10;    }&#10;&#10;    public SanitarioHongoDto mapToDtoSanitarioHongo(SanitarioHongo entity) {&#10;        if (entity == null) return null;&#10;        SanitarioHongoDto dto = new SanitarioHongoDto();&#10;        dto.setId(entity.getId());&#10;        dto.setSanitarioId(entity.getSanitario() != null ? entity.getSanitario().getId() : null);&#10;        dto.setHongoId(entity.getHongo() != null ? entity.getHongo().getId() : null);&#10;        dto.setRepeticion(entity.getRepeticion());&#10;        dto.setValor(entity.getValor());&#10;        dto.setIncidencia(entity.getIncidencia());&#10;        return dto;&#10;    }&#10;&#10;    public SanitarioHongo mapToEntitySanitarioHongo(SanitarioHongoDto dto) {&#10;        if (dto == null) return null;&#10;        SanitarioHongo entity = new SanitarioHongo();&#10;        entity.setId(dto.getId());&#10;        if (dto.getSanitarioId() != null) {&#10;            Sanitario sanitario = new Sanitario();&#10;            sanitario.setId(dto.getSanitarioId());&#10;            entity.setSanitario(sanitario);&#10;        } else {&#10;            entity.setSanitario(null);&#10;        }&#10;        if (dto.getHongoId() != null) {&#10;            Hongo hongo = new Hongo();&#10;            hongo.setId(dto.getHongoId());&#10;            entity.setHongo(hongo);&#10;        } else {&#10;            entity.setHongo(null);&#10;        }&#10;        entity.setRepeticion(dto.getRepeticion());&#10;        entity.setValor(dto.getValor());&#10;        entity.setIncidencia(dto.getIncidencia());&#10;        return entity;&#10;    }&#10;&#10;    public SemillaDto mapToDtoSemilla(Semilla entity) {&#10;        if (entity == null) return null;&#10;        SemillaDto dto = new SemillaDto();&#10;        dto.setId(entity.getId());&#10;        dto.setNroSemillasPura(entity.getNroSemillasPura());&#10;        dto.setActivo(entity.isActivo());&#10;        return dto;&#10;    }&#10;&#10;    public Semilla mapToEntitySemilla(SemillaDto dto) {&#10;        if (dto == null) return null;&#10;        Semilla entity = new Semilla();&#10;        entity.setId(dto.getId());&#10;        entity.setNroSemillasPura(dto.getNroSemillasPura());&#10;        entity.setActivo(dto.isActivo());&#10;        return entity;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>